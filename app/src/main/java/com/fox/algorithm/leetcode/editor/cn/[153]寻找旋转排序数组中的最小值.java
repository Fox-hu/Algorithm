//已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 nums = [0,1,2,4,5,6,7] 在变
//化后可能得到：
//
// 
// 若旋转 4 次，则可以得到 [4,5,6,7,0,1,2] 
// 若旋转 7 次，则可以得到 [0,1,2,4,5,6,7] 
// 
//
// 注意，数组 [a[0], a[1], a[2], ..., a[n-1]] 旋转一次 的结果为数组 [a[n-1], a[0], a[1], a[2], 
//..., a[n-2]] 。 
//
// 给你一个元素值 互不相同 的数组 nums ，它原来是一个升序排列的数组，并按上述情形进行了多次旋转。请你找出并返回数组中的 最小元素 。 
//
// 你必须设计一个时间复杂度为 O(log n) 的算法解决此问题。 
//
// 
//
// 示例 1： 
//
// 
//输入：nums = [3,4,5,1,2]
//输出：1
//解释：原数组为 [1,2,3,4,5] ，旋转 3 次得到输入数组。
// 
//
// 示例 2： 
//
// 
//输入：nums = [4,5,6,7,0,1,2]
//输出：0
//解释：原数组为 [0,1,2,4,5,6,7] ，旋转 3 次得到输入数组。
// 
//
// 示例 3： 
//
// 
//输入：nums = [11,13,15,17]
//输出：11
//解释：原数组为 [11,13,15,17] ，旋转 4 次得到输入数组。
// 
//
// 
//
// 提示： 
//
// 
// n == nums.length 
// 1 <= n <= 5000 
// -5000 <= nums[i] <= 5000 
// nums 中的所有整数 互不相同 
// nums 原来是一个升序排序的数组，并进行了 1 至 n 次旋转 
// 
//
// Related Topics 数组 二分查找 👍 1080 👎 0


//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    public int findMin(int[] nums) {
        //二分搜索
        //这里主要是要分析旋转后最小值所在的区域 有三种可能的情况
        //1.左值 < 中值, 中值 < 右值 ：没有旋转，最小值在最左边，可以收缩右边界
        //2.左值 > 中值, 中值 < 右值 ：有旋转，最小值在左半边，可以收缩右边界
        //3.左值 < 中值, 中值 > 右值 ：有旋转，最小值在右半边，可以收缩左边界
        //根据可能的情况 我们的二分策略就是
        //如果中值 < 右值，则最小值在左半边，可以收缩右边界。
        //如果中值 > 右值，则最小值在右半边，可以收缩左边界。
        int lo = 0, hi = nums.length - 1;
        //这里不能用等号 因为最终会有lo=hi的情况 那么就会导致无限循环
        while (lo < hi) {
            int mid = lo + (hi - lo) / 2;
            if (nums[mid] > nums[hi]) {
                lo = mid + 1;
            } else {
                hi = mid;
            }
        }
        //while循环后 lo=hi 返回哪个都行
        return nums[lo];
    }
}
//leetcode submit region end(Prohibit modification and deletion)
