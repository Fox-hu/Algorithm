import javax.inject.Inject

task test1 {
    doLast {
        println "task test1 exec..."
    }
}
task test2 {
    doLast {
        println "task test2 exec..."
    }
}
task test3 {
    doLast {
        println "task test3 exec..."
    }
}

//自定义Task类，必须继承自DefaultTask
class SayHelloTask1 extends DefaultTask {

    @Internal String msg = "default name"
    @Internal int age = 18

    //构造函数必须用@javax.inject.Inject注解标识
    @Inject
    SayHelloTask1(int age) {
        this.age = age
    }

    //通过@TaskAction注解来标识该Task要执行的动作
    @TaskAction
    void sayHello() {
        println "Hello $msg ! age is ${age}"
    }

}

task hello(type: SayHelloTask1, group: "Mygroup",constructorArgs: [20])

//对task进行配置
hello.configure{
    println 'hello task configure'
    msg = 'silver'
}

//获取task名称
println "task name is ${hello.getName()}"

//获取task的组名
println "task group is ${hello.getGroup()}"

//设置hello task中的属性值
hello.setProperty("age",70)

//获取task中名称为msg的属性值
println "task msg is ${hello.property('msg')}"

//设置task的依赖 只有当task1执行完成后才会执行hello task
hello.dependsOn(test1)

//设置终结任务，当执行完hello task后执行task2 多用于进行清理操作
hello.finalizedBy(test2)

//如果同时执行hello、test3这2个task，会确保test3执行完之后才执行hello这个task，用这个来保证执行顺序
hello.setMustRunAfter([test3])

//设置满足某个条件后才执行该task
hello.setOnlyIf{
    //只有当 age = 70 时，才会执行task，否则不会执行
    return hello.property("age") == 70
}
